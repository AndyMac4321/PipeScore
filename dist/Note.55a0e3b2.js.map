{"version":3,"sources":["Note.ts"],"names":[],"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","file":"Note.55a0e3b2.js","sourceRoot":"..","sourcesContent":["/*\n\nclass Note {\n  // TODO gaps between notes still not right (e.g. set all to doublings in a bar, or have two high As after each other)\n  // todo rests - by using a note of the form { note: 'R', ... }\n  // type NoteObj = { note: Pitch, length: number, gracenote: Gracenote | null }\n  // notes: []NoteObj\n  notes = o([]);\n\n  tailGap = 5;\n  shortTailLength = 10;\n\n  draggedNote = o(null);\n  selectedNotes = o([]);\n  eventListener = null;\n\n  numberOfNotes = computed(() => this.notes().length);\n\n  // prevNote: Pitch\n  noteAndGracenoteWidth = (notes, gracenoteRatio, prevNote = null) => notes.map((n,i) => 1 + ((n.note === 'R' || n.gracenote === null)\n    ? 0\n    : gracenoteRatio * n.gracenote.numberOfNotes(n.note, i === 0 ? prevNote : notes[i - 1].note)())\n    ).reduce((a,b) => a + b,0);\n\n  totalBeatWidth = previousNote => computed(() => this.noteAndGracenoteWidth(this.notes(), gracenoteToNoteWidthRatio, previousNote));\n\n  subscribeToMouse = () => null;\n  unsubscribeToMouse = () => null;\n  mouseSubFn = null;\n\n  constructor(sub,unsub) {\n    this.subscribeToMouse = sub;\n    this.unsubscribeToMouse = unsub;\n    this.notes([{ note: 'G', length: 1, gracenote: new Gracenote() }])\n    //this.notes([{ note: 'G', length: 0.375, gracenote: new Gracenote() }, { note: 'R', length: 0.5, gracenote: new Gracenote(sub, unsub) }, { note: 'A', length: 0.125, gracenote: new Gracenote()}]);\n    //this.notes([{ note: 'R', length: 1, gracenote: null }]);\n\n\n    on('delete-selected-note', () => {\n      let notes = this.notes();\n      // has to be replaced with null then removed all at the // same way so that the later indices in selectedNotes \n      // are still valid\n      this.selectedNotes().forEach(n => notes[n] = null);\n      notes = notes.filter(n => n !== null);\n      this.notes(notes);\n      this.deselect();\n    })\n  }\n\n\n  beamFrom = (x1,y1, x2,y2, length1,length2) => {\n    // draw beams from note1 at x1,y1 to note2 x2,y2\n    // where note1 is length1 long and note2 is length2\n    const leftIs1 = computed(() => x1() < x2());\n    const leftLength = computed(() => leftIs1() ? length1 : length2);\n    const rightLength = computed(() => leftIs1() ? length2 : length1);\n    const xL = computed(() => leftIs1() ? x1() : x2());\n    const xR = computed(() => leftIs1() ? x2() : x1());\n    const yL = computed(() => leftIs1() ? y1() : y2());\n    const yR = computed(() => leftIs1() ? y2() : y1());\n    // log laws! :)\n    const leftTails = computed(() => Math.ceil(Math.log(1 / leftLength()) / Math.log(2)));\n    const rightTails = computed(() => Math.ceil(Math.log(1 / rightLength()) / Math.log(2)));\n\n\n    const diffIsL = computed(() => leftTails() > rightTails());\n\n    // tails shared by both notes\n    const sharedTails = computed(() => diffIsL() ? [...Array(rightTails()).keys()] : [...Array(leftTails()).keys()]);\n    // tails extra tails for one note\n    const diffTails = computed(() => diffIsL() ? [...Array(leftTails()).keys()].splice(rightTails()) : [...Array(rightTails()).keys()].splice(leftTails()));\n\n    const tailEndY = computed(() =>\n      diffIsL()\n      // because similar triangles\n        ? yL() + this.shortTailLength / (xR() - xL()) * (yR() - yL())\n        : yR() - this.shortTailLength / (xR() - xL()) * (yR() - yL()));\n    \n\n    return svg`<g class=\"tails\">\n      ${map(sharedTails,\n        i =>\n          svg`<line\n            x1=${xL}\n            x2=${xR}\n            y1=${computed(() => yL() - i * this.tailGap)}\n            y2=${computed(() => yR() - i * this.tailGap)}\n            stroke=\"black\"\n            stroke-width=\"2\" />`\n            )}\n      ${map(diffTails,\n        i =>\n          svg`<line\n            x1=${computed(() => diffIsL() ? xL() : xR())}\n            x2=${computed(() => diffIsL() ? xL() + this.shortTailLength : xR() - this.shortTailLength)}\n            y1=${computed(() => (diffIsL() ? yL() : yR()) - i * this.tailGap)}\n            y2=${computed(() => tailEndY() - i * this.tailGap)}\n            stroke=\"black\"\n            stroke-width=\"2\" />`\n            )}\n    </g>`;\n  }\n  setNote = (i, note) => {\n    // params: i int, note G | A | B | ...\n    // set a note to the note given\n    const newNotes = this.notes().slice();\n    if (i != null) newNotes[i] = { ...newNotes[i], note: note };\n    (i != null) ? this.notes(newNotes) : this.notes([{ note: note, length: 1, gracenote: new Gracenote() }]);\n  }\n  validNoteLengths = (notes) =>\n    notes.reduce((a,b) => { length: a.length + b.length },{ length: 0 }) === this.length;\n  \n  changeNoteLength = (i,newLength) => {\n    const newNotes = this.notes().slice();\n    const oldNote = newNotes[i];\n    newNotes[i] = { ...oldNote, length: newLength };\n\n    this.notes(newNotes);\n  }\n\n  select = (i) => {\n    if (!this.selectedNotes().includes(i)) this.selectedNotes([...this.selectedNotes(), i])\n    on('deselect-all-notes', this.deselect);\n  }\n  deselect = () => {\n    this.selectedNotes([]);\n    removeEvent('deselect-all-notes', this.deselect);\n  }\n\n  click = (i, event) => {\n    // drag note at index i in this.notes()\n    // and add event listener for dragging\n    if (!event.shiftKey) {\n      dispatchEvent('deselect-all-notes');\n      this.draggedNote(i);\n      this.mouseSubFn = n => this.setNote(i,n)\n      this.subscribeToMouse(this.mouseSubFn);\n    }\n    this.select(i);\n    document.addEventListener('mouseup', this.unclick);\n  }\n  unclick = () => {\n    // deselect note and remove event listener started\n    // by this.select(i)\n    this.draggedNote(null);\n    document.removeEventListener('mouseup', this.unclick);\n    this.unsubscribeToMouse(this.mouseSubFn);\n  }\n  noteHead = (x,y, note,selected, mousedown,mouseup) => {\n    // Draw note head, ledger line and dot\n    const noteWidth = 5;\n    const noteHeight = 4;\n    const rotation = 30;\n\n    const clickableWidth = 14;\n    const clickableHeight = 12;\n\n    const hasDot = (Math.log(note.length) / Math.log(2)) % 1 !== 0;\n    const dotYOffset = (['G','B','D','F','HA'].includes(note.note)) ? -3 : 0;\n    const dotXOffset = 10;\n    const dragged = computed(() => this.draggedNote() === this.notes().indexOf(note));\n\n\n    // pointer events must be set so that if it is being\n    // dragged, it shouldn't get pointer events because\n    // that interferes with the drag boxes (you can't\n    // drag downwards a single box)\n    const pointerEvents = computed(() => dragged() ? 'none' : 'visiblePainted');\n\n    const filled = note.length < 1.5; // shorter than a dotted crotchet\n\n    const rotateText = computed(() => \"30deg \" + Math.round(x()) + \" \" + Math.round(y()));\n\n    const colour = computed(() => selected() ? \"orange\" : \"black\");\n\n    return svg`<g class=\"note-head\">\n      <ellipse cx=${x} cy=${y} rx=\"5\" ry=\"4\" stroke=${colour} fill=${computed(() => filled ? colour : \"white\")} transform=${computed(() => `rotate(30 ${x()} ${y()})`)} pointer-events=${pointerEvents} />\n\n      ${hasDot ? svg`<circle cx=${computed(() => x() + dotXOffset)} cy=${computed(() => y() + dotYOffset)} r=\"1.5\" fill=${colour} pointer-events=\"none\" />` : null}\n\n      ${(note.note === 'HA') ? svg`<line class=\"ledger\" x1=${computed(() => x() - 8)} x2=${computed(() => x() + 8)} y1=${y} y2=${y} stroke=${colour} pointer-events=\"none\" />` : null}\n\n\n      <rect x=${computed(() => x() - clickableWidth / 2)} y=${computed(() => y() - clickableHeight / 2)} width=${clickableWidth} height=${clickableHeight} onmousedown=${mousedown} onmouseup=${mouseup} pointer-events=${pointerEvents} opacity=\"0\"/>\n    </g>`;\n  }\n\n\n  singleton = (note,lastNote, x,y, noteWidth,numberOfTails) => {\n    const stemX = computed(() => x() - 5);\n    const stemY = computed(() => noteOffset(y) + 30);\n\n    return svg`\n      ${note.gracenote === null ? null : svg`<${note.gracenote.render} x=${x} y=${y} gracenoteWidth=${computed(() => noteWidth * 0.6)} thisNote=${note.note} previousNote=${lastNote} />`}\n\n      ${this.noteHead(x, computed(() => noteY(y(), note.note)), note,computed(() => this.selectedNotes().includes(this.notes().indexOf(note))), e => this.click(0, e), this.unclick)}\n      ${(note.length > 3) ? null : svg`<line\n        x1=${stemX}\n        x2=${stemX}\n        y1=${y}\n        y2=${stemY}\n        stroke=\"black\"\n        />`}\n      ${numberOfTails > 0 ? svg`<g class=\"tails\">\n        ${[...Array(numberOfTails).keys()].map(t => svg`<line x1=${stemX} x2=${computed(() => stemX() + 10)} y1=${computed(() => stemY() - 5 * t)} y2=${computed(() => stemY() - 5 * t - 10)} stroke=\"black\" />`)}\n      </g>` : null}\n    `;\n  }\n\n  render = (props) => {\n    // render self\n\n    // takes a note and returns not the actual index, but the index including\n    // gracenoteToNoteWidthRatio * all the gracenotes up to it\n    // useful for x calculations\n\n    const lastNote = computed(() => props.previousNote() ? props.previousNote() : null);\n    const relativeIndexOfGracenote = note => computed(() => this.noteAndGracenoteWidth(this.notes().slice().splice(0,this.notes().indexOf(note)), gracenoteToNoteWidthRatio, lastNote()));\n    const relativeIndexOf = note => computed(() => relativeIndexOfGracenote(note)() + gracenoteToNoteWidthRatio * (note.gracenote === null ? 0 : note.gracenote.numberOfNotes(note.note, this.notes().indexOf(note) === 0 ? lastNote() : this.notes()[this.notes().indexOf(note) - 1].note)()));\n    const xOf = note => computed(() => props.x() + relativeIndexOf(note)() * props.noteWidth());\n    const yOf = note => computed(() => noteY(props.y(), note.note));\n\n    const stemXOf = note => computed(() => xOf(note)() - 5);\n\n    return svg`<g class=\"note\">\n      ${computed(() => {\n        if (this.numberOfNotes() === 1 && this.notes()[0].note === 'R') {\n          return svg`<g class=\"rest\">\n            <circle cx=${props.x} cy=${props.y} r=\"10\" fill=\"red\" />\n          </g>`\n\n        } else if (this.numberOfNotes() === 1) {\n          const note = this.notes()[0];\n          const numberOfTails = Math.ceil(-1 * Math.log(note.length) / Math.log(2));\n          return this.singleton(note,lastNote(),props.x,props.y,props.noteWidth(),numberOfTails);\n\n/*\n      return svg`\n        ${note.gracenote === null ? null : svg`<${note.gracenote.render} x=${computed(() => props.x() + props.noteWidth() * relativeIndexOfGracenote(note)())} y=${props.y} gracenoteWidth=${computed(() => props.noteWidth() * 0.6)} thisNote=${computed(() => this.notes()[0].note)} previousNote=${lastNote} />`}\n\n        ${this.noteHead(xOf(note), computed(() => noteY(props.y(), note.note)), note,computed(() => this.selectedNotes().includes(this.notes().indexOf(note))), e => this.click(0, e), this.unclick)}\n        ${(note.length > 3) ? null : svg`<line\n          x1=${stemXOf(note)}\n          x2=${stemXOf(note)}\n          y1=${yOf(note)}\n          y2=${stemYOf(note)}\n          stroke=\"black\"\n          />`}\n        ${numberOfTails > 0 ? svg`<g class=\"tails\">\n          ${[...Array(numberOfTails).keys()].map(t => svg`<line x1=${stemXOf(note)} x2=${computed(() => stemXOf(note)() + 10)} y1=${computed(() => stemYOf(note)() - 5 * t)} y2=${computed(() => stemYOf(note)() - 5 * t - 10)} stroke=\"black\" />`)}\n        </g>` : null}\n      `;\n      * /\n\n        } else {\n          const cap = (n, cap) =>\n            (n > cap) ? cap :\n            (n < -cap) ? -cap :\n            n;\n\n          const diff = computed(() => cap(\n            // todo cap should be dependent on how many notes are in the group\n            // difference between first and last notes in a group\n            noteOffset(this.notes()[this.notes().length - 1].note)\n            - noteOffset(this.notes()[0].note\n            ), 10));\n          \n          const multipleLowest = o(false);\n\n          const lowestNote = computed(() => {\n            let multiple = false;\n            let lowestNote = this.notes().reduce((last,next) => {\n              if (noteOffset(next.note) === noteOffset(last.note)) {\n                multiple = true;\n                return last;\n              } else if (noteOffset(next.note) > noteOffset(last.note)) {\n                multiple = false;\n                return next;\n              } else {\n                return last;\n              }\n            });\n            if (multiple) {\n              multipleLowest(true);\n            }\n            return lowestNote;\n          });\n\n          const stemOffset = note => computed(() => {\n            return (noteOffset(lowestNote().note) - noteOffset(note.note));\n          });\n\n          const diffForLowest = computed(() => 30 + noteOffset(lowestNote().note) - (multipleLowest ? 0 : diff() * relativeIndexOf(lowestNote())() / this.totalBeatWidth(props.previousNote())()));\n\n          const stemYOf = note => computed(() => {\n            return props.y()\n              + (multipleLowest()\n                // straight line if there is more than one lowest note\n                ? 0\n                // otherwise use a slant\n                : diff() * relativeIndexOf(note)() / this.totalBeatWidth(props.previousNote())())\n              // offset so that the lowest note is always a constant height\n              + diffForLowest();\n          });\n          // Intentional double equals (array out of bounds)\n          const notANote = note => note == null || note.note === 'R';\n\n          const isSingleton = note => computed(() => !(notANote(this.notes()[this.notes().indexOf(note) - 1]) || notANote(this.notes()[this.notes().indexOf(note) + 1])));\n\n\n          return svg`\n            <g class=\"grouped-notes\">\n              ${map(\n                this.notes,\n                note => {\n                  let previousNote = computed(() => this.notes()[this.notes().indexOf(note) - 1]);\n\n                  return svg`<g class=\"grouped-note\">\n                      ${note.gracenote === null ? null : svg`<${note.gracenote.render} x=${computed(() => props.x() + props.noteWidth() * relativeIndexOfGracenote(note)())} y=${props.y} gracenoteWidth=${computed(() => props.noteWidth() * 0.6)} thisNote=${computed(() => this.notes()[this.notes().indexOf(note)].note)} previousNote=${this.notes()[this.notes().indexOf(note) - 1] ? o(this.notes()[this.notes().indexOf(note) - 1].note) : lastNote} />`}\n\n                      ${computed(() => this.noteHead(xOf(note), yOf(note), note,computed(() => this.selectedNotes().includes(this.notes().indexOf(note))), e => this.click(this.notes().indexOf(note),  e), this.unclick))}\n\n                      ${\n                        computed(() => previousNote() ? this.beamFrom(stemXOf(note),stemYOf(note), stemXOf(previousNote()),stemYOf(previousNote()), note.length, previousNote().length) : null)\n                      }\n\n                      <line\n                        x1=${stemXOf(note)}\n                        x2=${stemXOf(note)}\n                        y1=${yOf(note)}\n                        y2=${stemYOf(note)}\n                        stroke=\"black\"\n                        />\n                    </g>`\n                }\n              )}\n            </g>`;\n        }\n      })}\n    </g>`;\n\n  }\n}\n*/\n\nconst Note = {\n  noteAndGracenoteWidth: (notes, gracenoteRatio, prevNote=null) =>\n    notes.map((n,i) => 1 +\n      (n.note === 'R' || n.gracenote === null)\n        ? 0\n        : gracenoteRatio * Gracenote.numberOfNotes(n.gracenote, n.note, i === 0 ? prevNote : notes[i - 1].note)\n    ).reduce((a,b) => a + b),\n    \n  totalBeatWidth: (note,previousNote) => Note.noteAndGracenoteWidth(note.notes, gracenoteToNoteWidthRatio, previousNote),\n\n  lastNoteOfWholeNote: wholeNote => wholeNote ? wholeNote.notes[wholeNote.notes.length - 1].note : null,\n\n  numberOfNotes: note => note.notes.length,\n  beamFrom: (x1,y1, x2,y2, length1,length2) => {\n    // draw beams from note1 at x1,y1 to note2 x2,y2\n    // where note1 is length1 long and note2 is length2\n    const leftIs1 = x1 < x2;\n    const leftLength = leftIs1 ? length1 : length2;\n    const rightLength = leftIs1 ? length2 : length1;\n    const xL = leftIs1 ? x1 : x2;\n    const xR = leftIs1 ? x2 : x1;\n    const yL = leftIs1 ? y1 : y2;\n    const yR = leftIs1 ? y2 : y1;\n    // log laws! :)\n    const leftTails = Math.ceil(Math.log(1 / leftLength) / Math.log(2));\n    const rightTails = Math.ceil(Math.log(1 / rightLength) / Math.log(2));\n\n\n    const diffIsL = leftTails > rightTails;\n\n    // tails shared by both notes\n    const sharedTails = diffIsL ? [...Array(rightTails).keys()] : [...Array(leftTails).keys()];\n    // tails extra tails for one note\n    const diffTails = diffIsL ? [...Array(leftTails).keys()].splice(rightTails) : [...Array(rightTails).keys()].splice(leftTails);\n\n    const tailEndY =\n      diffIsL\n      // because similar triangles\n        ? yL + this.shortTailLength / (xR - xL) * (yR - yL)\n        : yR - this.shortTailLength / (xR - xL) * (yR - yL);\n    \n\n    return svg`<g class=\"tails\">\n      ${sharedTails.map(\n        i =>\n          svg`<line\n            x1=${xL}\n            x2=${xR}\n            y1=${yL - i * this.tailGap}\n            y2=${yR - i * this.tailGap}\n            stroke=\"black\"\n            stroke-width=\"2\" />`\n            )}\n      ${diffTails.map(\n        i =>\n          svg`<line\n            x1=${diffIsL ? xL : xR}\n            x2=${diffIsL ? xL + this.shortTailLength : xR - this.shortTailLength}\n            y1=${(diffIsL ? yL : yR) - i * this.tailGap}\n            y2=${tailEndY - i * this.tailGap}\n            stroke=\"black\"\n            stroke-width=\"2\" />`\n            )}\n    </g>`;\n  },\n  \n  noteHead: (x,y, note,noteIndex,selected, mousedown,mouseup) => {\n    // Draw note head, ledger line and dot\n    const noteWidth = 5;\n    const noteHeight = 4;\n    const rotation = 30;\n\n    const clickableWidth = 14;\n    const clickableHeight = 12;\n\n    const hasDot = (Math.log(note.length) / Math.log(2)) % 1 !== 0;\n    const dotYOffset = (['G','B','D','F','HA'].includes(note.note)) ? -3 : 0;\n    const dotXOffset = 10;\n    const dragged = this.draggedNote === noteIndex;\n\n\n    // pointer events must be set so that if it is being\n    // dragged, it shouldn't get pointer events because\n    // that interferes with the drag boxes (you can't\n    // drag downwards a single box)\n    const pointerEvents = dragged ? 'none' : 'visiblePainted';\n\n    const filled = note.length < 1.5; // shorter than a dotted crotchet\n\n    const rotateText = \"30deg \" + Math.round(x) + \" \" + Math.round(y);\n\n    const colour = selected ? \"orange\" : \"black\";\n\n    return svg`<g class=\"note-head\">\n      <ellipse cx=${x} cy=${y} rx=\"5\" ry=\"4\" stroke=${colour} fill=${filled ? colour : \"white\"} transform=${`rotate(30 ${x} ${y})`} pointer-events=${pointerEvents} />\n\n      ${hasDot ? svg`<circle cx=${x + dotXOffset} cy=${y + dotYOffset} r=\"1.5\" fill=${colour} pointer-events=\"none\" />` : null}\n\n      ${(note.note === 'HA') ? svg`<line class=\"ledger\" x1=${x - 8} x2=${x + 8} y1=${y} y2=${y} stroke=${colour} pointer-events=\"none\" />` : null}\n\n\n      <rect x=${x - clickableWidth / 2} y=${y - clickableHeight / 2} width=${clickableWidth} height=${clickableHeight} onmousedown=${mousedown} onmouseup=${mouseup} pointer-events=${pointerEvents} opacity=\"0\"/>\n    </g>`;\n  },\n  singleton: (note,noteIndex,lastNote, x,y, noteWidth,numberOfTails) => {\n    const stemX = x - 5;\n    const stemY = noteOffset(y) + 30;\n\n    const gracenoteProps = ({\n      x: x,\n      y: y,\n      gracenoteWidth: noteWidth * 0.6,\n      thisNote: note.note,\n      previousNote: lastNote\n    })\n\n    return svg`\n      ${note.gracenote === null ? null : Gracenote.render(note.gracenote, gracenoteProps)}\n\n      ${this.noteHead(x, noteY(y, note.note), note,this.selectedNotes.includes(noteIndex), e => this.click(0, e), this.unclick)}\n      ${(note.length > 3) ? null : svg`<line\n        x1=${stemX}\n        x2=${stemX}\n        y1=${y}\n        y2=${stemY}\n        stroke=\"black\"\n        />`}\n      ${numberOfTails > 0 ? svg`<g class=\"tails\">\n        ${[...Array(numberOfTails).keys()].map(t => svg`<line x1=${stemX} x2=${stemX + 10} y1=${stemY - 5 * t} y2=${stemY - 5 * t - 10} stroke=\"black\" />`)}\n      </g>` : null}\n    `;\n  },\n\n  render: (note,props) => {\n\n    // takes a note and returns not the actual index, but the index including\n    // gracenoteToNoteWidthRatio * all the gracenotes up to it\n    // useful for x calculations\n\n    const lastNote = props.previousNote || null;\n    const relativeIndexOfGracenote = (note,index) => Note.noteAndGracenoteWidth(note.notes.slice().splice(0,index), gracenoteToNoteWidthRatio, lastNote);\n    const relativeIndexOf = (note,index) => relativeIndexOfGracenote(note,index) + gracenoteToNoteWidthRatio * (note.gracenote === null ? 0 : note.gracenote.numberOfNotes(note.note, index === 0 ? lastNote : note.notes[index - 1].note));\n    const xOf = (note,noteIndex) => props.x + relativeIndexOf(note,noteIndex) * props.noteWidth;\n    const yOf = note => noteY(props.y, note.note);\n\n    const stemXOf = note => xOf(note) - 5;\n\n    if (Note.numberOfNotes(note) === 1 && note.notes[0].note === 'R') {\n          \n      return svg`<g class=\"rest\">\n        <circle cx=${props.x} cy=${props.y} r=\"10\" fill=\"red\" />\n      </g>`;\n\n    } else if (this.numberOfNotes === 1) {\n      const note = note.notes[0];\n      const numberOfTails = Math.ceil(-1 * Math.log(note.length) / Math.log(2));\n      return Note.singleton(note,0,lastNote,props.x,props.y,props.noteWidth,numberOfTails);\n    } else {\n      const cap = (n, cap) =>\n        (n > cap) ? cap :\n        (n < -cap) ? -cap :\n        n;\n\n      const diff = cap(\n        // todo cap should be dependent on how many notes are in the group\n        // difference between first and last notes in a group\n        noteOffset(note.notes[note.notes.length - 1].note)\n        - noteOffset(note.notes[0].note),\n        10);\n      \n\n      let multiple = false;\n      const lowestNote = note.notes.reduce((last,next) => {\n        if (noteOffset(next.note) === noteOffset(last.note)) {\n          multiple = true;\n          return last;\n        } else if (noteOffset(next.note) > noteOffset(last.note)) {\n          multiple = false;\n          return next;\n        } else {\n          return last;\n        }\n      });\n      const multipleLowest = multiple;\n\n      const stemOffset = note => \n        noteOffset(lowestNote.note) - noteOffset(note.note);\n\n      const diffForLowest = 30 + noteOffset(lowestNote.note) - (multipleLowest ? 0 : diff * relativeIndexOf(lowestNote) / Note.totalBeatWidth(note,props.previousNote));\n\n      const stemYOf = note => \n        props.y()\n          + (multipleLowest()\n            // straight line if there is more than one lowest note\n            ? 0\n            // otherwise use a slant\n            : diff * relativeIndexOf(note) / Note.totalBeatWidth(note,props.previousNote))\n          // offset so that the lowest note is always a constant height\n          + diffForLowest;\n      // Intentional double equals (array out of bounds)\n      const notANote = note => note == null || note.note === 'R';\n\n      const isSingleton = (note,index) => !(notANote(note.notes[index - 1]) || notANote(note.notes[index + 1]));\n\n\n      return svg`\n        <g class=\"grouped-notes\">\n          ${note.notes.map(\n            // todo replace all note with shortNote\n            (shortNote,index) => {\n              let previousNote = note.notes[index - 1];\n\n              const gracenoteProps = ({\n                x: props.x + props.noteWidth * relativeIndexOfGracenote(shortNote),\n                y: props.y,\n                gracenoteWidth: props.noteWidth * 0.6,\n                thisNote: shortNote.note,\n                previousNote: previousNote ? previousNote.note : lastNote\n              })\n\n              return svg`<g class=\"grouped-note\">\n                  ${shortNote.gracenote === null ? null : Gracenote.render(shortNote.gracenote,gracenoteProps)}\n\n                  ${/*todo*/Note.noteHead(xOf(shortNote), yOf(shortNote), shortNote,props.selectedNotes.includes(index), e => Note.click(index, e), Note.unclick)}\n\n                  ${\n                    computed(() => previousNote() ? this.beamFrom(stemXOf(shortNote),stemYOf(shortNote), stemXOf(previousNote()),stemYOf(previousNote()), shortNote.length, previousNote().length) : null)\n                  }\n\n                  <line\n                    x1=${stemXOf(shortNote)}\n                    x2=${stemXOf(shortNote)}\n                    y1=${yOf(shortNote)}\n                    y2=${stemYOf(shortNote)}\n                    stroke=\"black\"\n                    />\n                </g>`\n            }\n          )}\n        </g>`;\n    }\n\n  },\n\n  init: () => ({\n    notes: [{note: 'A'}]\n  })\n}\n"]}