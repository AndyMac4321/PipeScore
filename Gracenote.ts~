import { Pitch } from './all';
const gracenotes = new Map();
gracenotes.set('throw-d', (note,_) => note === Pitch.D ? [Pitch.G,Pitch.D,Pitch.C] : -1);
gracenotes.set('doubling', (note,prev) => {
  let init = [];
  if (note === Pitch.G || note === Pitch.A || note === Pitch.B || note === Pitch.C) {
    init = [Pitch.HG, note, Pitch.D];
  } else if (note === Pitch.D) {
    init = [Pitch.HG, note, Pitch.E];
  } else if (note === Pitch.E){
    init = [Pitch.HG, note, Pitch.F];
  } else if (note === Pitch.F) {
    init = [Pitch.HG, note, Pitch.HG];
  } else if (note === Pitch.HG) {
    // ['HA', note, 'HA'] or ['HG','F'] ?
    init = [Pitch.HA,note,Pitch.HA];
  } else if (note === Pitch.HA)  {
    init = [Pitch.HA, Pitch.HG];
  } else {
    return -1;
  }

  if (prev === Pitch.HG && (note !== Pitch.HA || note !== Pitch.HG)) {
    init[0] = Pitch.HA;
  } else if (prev === Pitch.HA) {
    init = init.splice(1);

    if (note === Pitch.HG) init = [Pitch.HG,Pitch.F];
  }

  return init
});
