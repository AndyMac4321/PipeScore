"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
exports.__esModule = true;
/*
  UI.ts - User interface for PipeScore
  Copyright (C) 2020 Archie Maclean
*/
var uhtml_1 = require("uhtml");
var global_1 = require("../global");
var functions_1 = require("../Note/functions");
function render(dispatch) {
    var setNoteInput = function (length) { return function () { return dispatch({ name: 'set note input length', length: length }); }; };
    var isCurrentNoteInput = function (length) { return global_1.inputLength === null ? false : functions_1["default"].equalOrDotted(global_1.inputLength, length); };
    var noteInputButton = function (length) { return uhtml_1.html(templateObject_1 || (templateObject_1 = __makeTemplateObject(["<button\n    class=", "\n    id=", "\n    onclick=", ">\n    </button>"], ["<button\n    class=", "\n    id=", "\n    onclick=", ">\n    </button>"])), (isCurrentNoteInput(length) ? 'highlighted' : null) + " note-input", "note-" + length, setNoteInput(length)); };
    var gracenoteInput = function (name) { return uhtml_1.html(templateObject_2 || (templateObject_2 = __makeTemplateObject(["<button class=\"textual\" onclick=", ">", "</button>"], ["<button class=\"textual\" onclick=", ">", "</button>"])), function () { return dispatch({ name: 'set gracenote', value: name }); }, name); };
    var changeZoomLevel = function () {
        var element = document.getElementById('zoom-level');
        if (element !== null) {
            var newZoomLevel = parseInt(element.value, 10);
            if (!isNaN(newZoomLevel)) {
                dispatch({ name: 'change zoom level', zoomLevel: newZoomLevel });
            }
        }
    };
    return uhtml_1.html(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    <div id=\"topbar\">\n      <div id=\"note-inputs\">\n        ", "\n        ", "\n        ", "\n        ", "\n        ", "\n        ", "\n        ", "\n      </div>\n      <button id=\"toggle-dotted\" class=", " onclick=", ">\u2022</button>\n      <button id=\"tie\" onclick=", "></button>\n      <button id=\"triplet\" onclick=", ">Triplet</button>\n      <button id=\"delete-notes\" class=\"delete\" onclick=", "></button>\n    </div>\n    <div id=\"sidebar\">\n      <h2>Gracenote</h2>\n      <button class=\"textual\" onclick=", ">single</button>\n      ", "\n      ", "\n      ", "\n      ", "\n      ", "\n      ", "\n      <hr />\n      <h2>Bar</h2>\n      <button class=\"add\" onclick=", "></button>\n      <button class=\"delete\" onclick=", "></button>\n      <hr />\n      <h2>Stave</h2>\n      <button class=\"add\" onclick=", "></button>\n      <button class=\"delete\" onclick=", "></button>\n      <hr />\n      <h2>Text</h2>\n      <button class=\"add\" onclick=", "></button>\n      <button class=\"delete\" onclick=", "></button>\n      <button onclick=", ">Centre</button>\n      <h2>Second Timing</h2>\n      <button class=\"add\" onclick=", "></button>\n      <hr />\n      <h2>Document</h2>\n      <button class=\"textual\">Print</button>\n      <button class=\"textual\">Export</button>\n      <button class=\"textual\">Download</button>\n      <hr />\n      <label>Zoom Level</label>\n      <input id=\"zoom-level\" type=\"range\" min=\"10\" max=\"200\" step=\"2\" value=", " oninput=", " />\n    </div>\n  "], ["\n    <div id=\"topbar\">\n      <div id=\"note-inputs\">\n        ", "\n        ", "\n        ", "\n        ", "\n        ", "\n        ", "\n        ", "\n      </div>\n      <button id=\"toggle-dotted\" class=", " onclick=", ">\u2022</button>\n      <button id=\"tie\" onclick=", "></button>\n      <button id=\"triplet\" onclick=", ">Triplet</button>\n      <button id=\"delete-notes\" class=\"delete\" onclick=", "></button>\n    </div>\n    <div id=\"sidebar\">\n      <h2>Gracenote</h2>\n      <button class=\"textual\" onclick=", ">single</button>\n      ", "\n      ", "\n      ", "\n      ", "\n      ", "\n      ", "\n      <hr />\n      <h2>Bar</h2>\n      <button class=\"add\" onclick=", "></button>\n      <button class=\"delete\" onclick=", "></button>\n      <hr />\n      <h2>Stave</h2>\n      <button class=\"add\" onclick=", "></button>\n      <button class=\"delete\" onclick=", "></button>\n      <hr />\n      <h2>Text</h2>\n      <button class=\"add\" onclick=", "></button>\n      <button class=\"delete\" onclick=", "></button>\n      <button onclick=", ">Centre</button>\n      <h2>Second Timing</h2>\n      <button class=\"add\" onclick=", "></button>\n      <hr />\n      <h2>Document</h2>\n      <button class=\"textual\">Print</button>\n      <button class=\"textual\">Export</button>\n      <button class=\"textual\">Download</button>\n      <hr />\n      <label>Zoom Level</label>\n      <input id=\"zoom-level\" type=\"range\" min=\"10\" max=\"200\" step=\"2\" value=", " oninput=", " />\n    </div>\n  "])), noteInputButton("sb" /* Semibreve */), noteInputButton("m" /* Minim */), noteInputButton("c" /* Crotchet */), noteInputButton("q" /* Quaver */), noteInputButton("sq" /* SemiQuaver */), noteInputButton("ssq" /* DemiSemiQuaver */), noteInputButton("hdsq" /* HemiDemiSemiQuaver */), (global_1.inputLength && functions_1["default"].hasDot(global_1.inputLength)) ? 'highlighted' : null, function () { return dispatch({ name: 'toggle dotted' }); }, function () { return dispatch({ name: 'tie selected notes' }); }, function () { return dispatch({ name: 'add triplet' }); }, function () { return dispatch({ name: 'delete selected notes' }); }, function () { return dispatch({ name: 'set gracenote', value: null }); }, gracenoteInput('doubling'), gracenoteInput('throw-d'), gracenoteInput('toarluath'), gracenoteInput('grip'), gracenoteInput('birl'), gracenoteInput('g-gracenote-birl'), function () { return dispatch({ name: 'add bar' }); }, function () { return dispatch({ name: 'delete bar' }); }, function () { return dispatch({ name: 'add stave' }); }, function () { return dispatch({ name: 'delete stave' }); }, function () { return dispatch({ name: 'add text' }); }, function () { return dispatch({ name: 'delete text' }); }, function () { return dispatch({ name: 'centre text' }); }, function () { return dispatch({ name: 'add second timing' }); }, global_1.zoomLevel, changeZoomLevel);
}
exports["default"] = render;
var templateObject_1, templateObject_2, templateObject_3;
